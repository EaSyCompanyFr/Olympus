<?php

namespace Easy\DonBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DonRepository extends EntityRepository {
    /*
     * 
     */

    public function findTotalDonsMois() {
        $requete = $this->createQueryBuilder('d')
                ->select('u.username')
                ->join('d.utilisateur', 'u')
                ->groupBy('u.id');

        for ($i = 1; $i <= 12; $i++) {
            $requete->addSelect('SUM(CASE WHEN month(d.date)='.$i.' THEN d.montant ELSE 0 END)');
        }
        
        $donsAnneeParUtilisateurs = $requete->getQuery()
                ->getResult();

        $temp = $this->createQueryBuilder('d')
                ->select('MONTH(d.date) AS m')
                ->addSelect('COALESCE(SUM(d.montant), 0)')
                ->groupBy('m')
                ->getQuery()
                ->getResult();
                
        $totalDonsMois = array(0,0,0,0,0,0,0,0,0,0,0);
        foreach ($temp as $key => $value) {
            $totalDonsMois[intval($value['m'])-1] = intval($value[1]);
        }
        
        return array_merge(array('donsAnneeParUtilisateurs' => $donsAnneeParUtilisateurs), array('totalDonsMois' => $totalDonsMois));
    }

    /*
     * Statistiques
     */

    public function selectStatistiquesGlobales() {
        $montantMois = $this->createQueryBuilder('d')
                ->select('SUM(d.montant)')
                ->where('MONTH(d.date) = MONTH(:now)')
                ->setParameter('now', new \DateTime('now'))
                ->getQuery()
                ->getSingleScalarResult();

        $dernierDon = $this->createQueryBuilder('d')
                ->select('d')
                ->addSelect('u')
                ->addSelect('m')
                ->innerJoin('d.utilisateur', 'u')
                ->innerJoin('d.moyen_paiement', 'm')
                ->orderBy('d.date', 'DESC')
                ->setFirstResult(0)
                ->setMaxResults(1)
                ->getQuery()
                ->getResult();

        return array_merge(array('montantMois' => $montantMois), array('dernierDon' => $dernierDon[0]), array('pourcentage' => Don::getPourcentDons($montantMois)));
    }

    public function selectStatistiquesUtilisateur($utilisateur) {

        $montantMoyen = $this->createQueryBuilder('d')
                ->select('AVG(d.montant) AS montantMoyen')
                ->where('d.utilisateur=' . $utilisateur->getId())
                ->getQuery()
                ->getSingleScalarResult();

        $dons = $this->createQueryBuilder('d')
                ->select('d')
                ->addSelect('m')
                ->innerJoin('d.moyen_paiement', 'm')
                ->where('d.utilisateur=' . $utilisateur->getId())
                ->getQuery()
                ->getResult();

        return array_merge(array('dons' => $dons), array('montantMoyen' => $montantMoyen));
    }

}
